/**
 * Flowtype definitions for MarkdownTransformers
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  ElementNode,
  LexicalNode,
  TextFormatType,
  TextNode,
} from "lexical";
export type Transformer =
  | ElementTransformer
  | TextFormatTransformer
  | TextMatchTransformer;
export type ElementTransformer = {|
  export: (
    node: LexicalNode,
    traverseChildren: (node: ElementNode) => string
  ) => string | null,
  regExp: RegExp,
  replace: (
    parentNode: ElementNode,
    children: Array<LexicalNode>,
    match: Array<string>,
    isImport: boolean
  ) => void,
  type: "element",
|};
export type TextFormatTransformer = $ReadOnly<{|
  format: $ReadOnlyArray<TextFormatType>,
  tag: string,
  intraword?: boolean,
  type: "text-format",
|}>;
export type TextMatchTransformer = $ReadOnly<{|
  export: (
    node: LexicalNode,
    exportChildren: (node: ElementNode) => string,
    exportFormat: (node: TextNode, textContent: string) => string
  ) => string | null,
  importRegExp: RegExp,
  regExp: RegExp,
  replace: (node: TextNode, match: RegExp$matchResult) => void,
  trigger: string,
  type: "text-match",
|}>;
declare export var HEADING: ElementTransformer;
declare export var QUOTE: ElementTransformer;
declare export var CODE: ElementTransformer;
declare export var UNORDERED_LIST: ElementTransformer;
declare export var CHECK_LIST: ElementTransformer;
declare export var ORDERED_LIST: ElementTransformer;
declare export var INLINE_CODE: TextFormatTransformer;
declare export var BOLD_ITALIC_STAR: TextFormatTransformer;
declare export var BOLD_ITALIC_UNDERSCORE: TextFormatTransformer;
declare export var BOLD_STAR: TextFormatTransformer;
declare export var BOLD_UNDERSCORE: TextFormatTransformer;
declare export var STRIKETHROUGH: TextFormatTransformer;
declare export var ITALIC_STAR: TextFormatTransformer;
declare export var ITALIC_UNDERSCORE: TextFormatTransformer;
declare export var LINK: TextMatchTransformer;
