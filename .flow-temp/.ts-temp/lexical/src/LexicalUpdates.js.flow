/**
 * Flowtype definitions for LexicalUpdates
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  EditorUpdateOptions,
  LexicalCommand,
  LexicalEditor,
  Transform,
} from "./LexicalEditor";
import type { SerializedEditorState } from "./LexicalEditorState";
import type { LexicalNode, SerializedLexicalNode } from "./LexicalNode";
import { EditorState } from "./LexicalEditorState";
declare export function isCurrentlyReadOnlyMode(): boolean;
declare export function errorOnReadOnly(): void;
declare export function errorOnInfiniteTransforms(): void;
declare export function getActiveEditorState(): EditorState;
declare export function getActiveEditor(): LexicalEditor;
declare export function $applyTransforms(
  editor: LexicalEditor,
  node: LexicalNode,
  transformsCache: Map<string, Array<Transform<LexicalNode>>>
): void;
declare export function $parseSerializedNode(
  serializedNode: SerializedLexicalNode
): LexicalNode;
declare export function parseEditorState(
  serializedEditorState: SerializedEditorState,
  editor: LexicalEditor,
  updateFn: void | (() => void)
): EditorState;
declare export function readEditorState<V>(
  editorState: EditorState,
  callbackFn: () => V
): V;
declare export function commitPendingUpdates(editor: LexicalEditor): void;
declare export function triggerListeners(
  type: "update" | "root" | "decorator" | "textcontent" | "readonly",
  editor: LexicalEditor,
  isCurrentlyEnqueuingUpdates: boolean,
  ...payload: mixed[]
): void;
declare export function triggerCommandListeners<P>(
  editor: LexicalEditor,
  type: LexicalCommand<P>,
  payload: P
): boolean;
declare export function updateEditor(
  editor: LexicalEditor,
  updateFn: () => void,
  options?: EditorUpdateOptions
): void;
