/**
 * Flowtype definitions for LexicalRootNode
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { LexicalNode } from "../LexicalNode";
import type { SerializedElementNode } from "./LexicalElementNode";
import { ElementNode } from "./LexicalElementNode";
export type SerializedRootNode = SerializedElementNode;
declare export class RootNode mixins ElementNode {
  __cachedText: null | string;
  static getType(): string;
  static clone(): RootNode;
  constructor(): this;
  getTopLevelElementOrThrow(): empty;
  getTextContent(includeInert?: boolean, includeDirectionless?: false): string;
  remove(): empty;
  replace<N>(node: N): empty;
  insertBefore(nodeToInsert: LexicalNode): LexicalNode;
  insertAfter(nodeToInsert: LexicalNode): LexicalNode;
  updateDOM(prevNode: RootNode, dom: HTMLElement): false;
  append(...nodesToAppend: LexicalNode[]): this;
  static importJSON(serializedNode: SerializedRootNode): RootNode;
  exportJSON(): SerializedRootNode;
}
declare export function $createRootNode(): RootNode;
declare export function $isRootNode(
  node: RootNode | LexicalNode | null | void
): boolean;
