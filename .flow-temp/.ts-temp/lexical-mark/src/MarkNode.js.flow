/**
 * Flowtype definitions for MarkNode
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  EditorConfig,
  GridSelection,
  LexicalNode,
  NodeKey,
  NodeSelection,
  RangeSelection,
  SerializedElementNode,
  Spread,
} from "lexical";
import { ElementNode } from "lexical";
export type SerializedMarkNode = Spread<
  {|
    ids: Array<string>,
    type: "mark",
    version: 1,
  |},
  SerializedElementNode
>;
declare export class MarkNode mixins ElementNode {
  __ids: Array<string>;
  static getType(): string;
  static clone(node: MarkNode): MarkNode;
  static importDOM(): null;
  static importJSON(serializedNode: SerializedMarkNode): MarkNode;
  exportJSON(): SerializedMarkNode;
  constructor(ids: Array<string>, key?: NodeKey): this;
  createDOM(config: EditorConfig): HTMLElement;
  updateDOM(
    prevNode: MarkNode,
    element: HTMLElement,
    config: EditorConfig
  ): boolean;
  hasID(id: string): boolean;
  getIDs(): Array<string>;
  addID(id: string): void;
  deleteID(id: string): void;
  insertNewAfter(selection: RangeSelection): null | ElementNode;
  canInsertTextBefore(): false;
  canInsertTextAfter(): false;
  canBeEmpty(): false;
  isInline(): true;
  extractWithChild(
    child: LexicalNode,
    selection: RangeSelection | NodeSelection | GridSelection,
    destination: "clone" | "html"
  ): boolean;
  excludeFromCopy(destination: "clone" | "html"): boolean;
}
declare export function $createMarkNode(ids: Array<string>): MarkNode;
declare export function $isMarkNode(node: LexicalNode | null): boolean;
