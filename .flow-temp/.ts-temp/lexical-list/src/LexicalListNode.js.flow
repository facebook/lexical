/**
 * Flowtype definitions for LexicalListNode
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { Spread } from "lexical";
import {
  DOMConversionMap,
  EditorConfig,
  ElementNode,
  LexicalEditor,
  LexicalNode,
  NodeKey,
  SerializedElementNode,
} from "lexical";
export type SerializedListNode = Spread<
  {|
    listType: ListType,
    start: number,
    tag: ListNodeTagType,
    type: "list",
    version: 1,
  |},
  SerializedElementNode
>;
export type ListType = "number" | "bullet" | "check";
export type ListNodeTagType = "ul" | "ol";
declare export class ListNode mixins ElementNode {
  __tag: ListNodeTagType;
  __start: number;
  __listType: ListType;
  static getType(): string;
  static clone(node: ListNode): ListNode;
  constructor(listType: ListType, start: number, key?: NodeKey): this;
  getTag(): ListNodeTagType;
  getListType(): ListType;
  getStart(): number;
  createDOM(config: EditorConfig, _editor?: LexicalEditor): HTMLElement;
  updateDOM(
    prevNode: ListNode,
    dom: HTMLElement,
    config: EditorConfig
  ): boolean;
  static importDOM(): DOMConversionMap | null;
  static importJSON(serializedNode: SerializedListNode): ListNode;
  exportJSON(): SerializedListNode;
  canBeEmpty(): false;
  canIndent(): false;
  append(...nodesToAppend: LexicalNode[]): this;
  extractWithChild(child: LexicalNode): boolean;
}
declare export function $createListNode(
  listType: ListType,
  start?: number
): ListNode;
declare export function $isListNode(node: LexicalNode | null | void): boolean;
