{"version":3,"sources":["../../src/utils/socksProxy.ts"],"names":["SocksAuth","SocksAddressType","SocksCommand","SocksReply","SocksConnection","constructor","uid","socket","client","_buffer","Buffer","from","_offset","_fence","_fenceCallback","_socket","_boundOnData","_uid","_client","_onData","bind","on","_onClose","_run","catch","end","_authenticate","command","host","port","_parseRequest","CONNECT","_writeBytes","CommandNotSupported","off","onSocketRequested","version","_readByte","nMethods","methods","_readBytes","method","NO_ACCEPTABLE_METHODS","addressType","IPv4","join","FqName","length","toString","IPv6","bytes","tokens","i","push","readUInt16BE","buffer","Promise","f","slice","writable","write","onSocketClosed","concat","callback","undefined","socketConnected","Succeeded","parseIP","data","onSocketData","socketFailed","errorCode","HostUnreachable","NetworkUnreachable","ConnectionRefused","sendData","error","destroy","Error","address","net","isIPv4","split","map","t"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net from 'net';\nimport { assert } from './utils';\n\n// https://tools.ietf.org/html/rfc1928\n\nenum SocksAuth {\n  NO_AUTHENTICATION_REQUIRED = 0x00,\n  GSSAPI = 0x01,\n  USERNAME_PASSWORD = 0x02,\n  NO_ACCEPTABLE_METHODS = 0xFF\n}\n\nenum SocksAddressType {\n  IPv4 = 0x01,\n  FqName = 0x03,\n  IPv6 = 0x04\n}\n\nenum SocksCommand {\n  CONNECT = 0x01,\n  BIND = 0x02,\n  UDP_ASSOCIATE = 0x03\n}\n\nenum SocksReply {\n  Succeeded = 0x00,\n  GeneralServerFailure = 0x01,\n  NotAllowedByRuleSet = 0x02,\n  NetworkUnreachable = 0x03,\n  HostUnreachable = 0x04,\n  ConnectionRefused = 0x05,\n  TtlExpired = 0x06,\n  CommandNotSupported = 0x07,\n  AddressTypeNotSupported = 0x08\n}\n\nexport interface SocksConnectionClient {\n  onSocketRequested(uid: string, host: string, port: number): void;\n  onSocketData(uid: string, data: Buffer): void;\n  onSocketClosed(uid: string): void;\n}\n\nexport class SocksConnection {\n  private _buffer = Buffer.from([]);\n  private _offset = 0;\n  private _fence = 0;\n  private _fenceCallback: (() => void) | undefined;\n  private _socket: net.Socket;\n  private _boundOnData: (buffer: Buffer) => void;\n  private _uid: string;\n  private _client: SocksConnectionClient;\n\n  constructor(uid: string, socket: net.Socket, client: SocksConnectionClient) {\n    this._uid = uid;\n    this._socket = socket;\n    this._client = client;\n    this._boundOnData = this._onData.bind(this);\n    socket.on('data', this._boundOnData);\n    socket.on('close', () => this._onClose());\n    socket.on('end', () => this._onClose());\n    socket.on('error', () => this._onClose());\n    this._run().catch(() => this._socket.end());\n  }\n\n  async _run() {\n    assert(await this._authenticate());\n    const { command, host, port } = await this._parseRequest();\n    if (command !== SocksCommand.CONNECT) {\n      this._writeBytes(Buffer.from([\n        0x05,\n        SocksReply.CommandNotSupported,\n        0x00, // RSV\n        0x01, // IPv4\n        0x00, 0x00, 0x00, 0x00, // Address\n        0x00, 0x00 // Port\n      ]));\n      return;\n    }\n\n    this._socket.off('data', this._boundOnData);\n    this._client.onSocketRequested(this._uid, host, port);\n  }\n\n  async _authenticate(): Promise<boolean> {\n    // Request:\n    // +----+----------+----------+\n    // |VER | NMETHODS | METHODS  |\n    // +----+----------+----------+\n    // | 1  |    1     | 1 to 255 |\n    // +----+----------+----------+\n\n    // Response:\n    // +----+--------+\n    // |VER | METHOD |\n    // +----+--------+\n    // | 1  |   1    |\n    // +----+--------+\n\n    const version = await this._readByte();\n    assert(version === 0x05, 'The VER field must be set to x05 for this version of the protocol, was ' + version);\n\n    const nMethods = await this._readByte();\n    assert(nMethods, 'No authentication methods specified');\n\n    const methods = await this._readBytes(nMethods);\n    for (const method of methods) {\n      if (method === 0) {\n        this._writeBytes(Buffer.from([version, method]));\n        return true;\n      }\n    }\n    this._writeBytes(Buffer.from([version, SocksAuth.NO_ACCEPTABLE_METHODS]));\n    return false;\n  }\n\n  async _parseRequest(): Promise<{ host: string, port: number, command: SocksCommand }> {\n    // Request.\n    // +----+-----+-------+------+----------+----------+\n    // |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |\n    // +----+-----+-------+------+----------+----------+\n    // | 1  |  1  | X'00' |  1   | Variable |    2     |\n    // +----+-----+-------+------+----------+----------+\n\n    // Response.\n    // +----+-----+-------+------+----------+----------+\n    // |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |\n    // +----+-----+-------+------+----------+----------+\n    // | 1  |  1  | X'00' |  1   | Variable |    2     |\n    // +----+-----+-------+------+----------+----------+\n\n    const version = await this._readByte();\n    assert(version === 0x05, 'The VER field must be set to x05 for this version of the protocol, was ' + version);\n\n    const command = await this._readByte();\n    await this._readByte();  // skip reserved.\n    const addressType = await this._readByte();\n    let host = '';\n    switch (addressType) {\n      case SocksAddressType.IPv4:\n        host = (await this._readBytes(4)).join('.');\n        break;\n      case SocksAddressType.FqName:\n        const length = await this._readByte();\n        host = (await this._readBytes(length)).toString();\n        break;\n      case SocksAddressType.IPv6:\n        const bytes = await this._readBytes(16);\n        const tokens = [];\n        for (let i = 0; i < 8; ++i)\n          tokens.push(bytes.readUInt16BE(i * 2));\n        host = tokens.join(':');\n        break;\n    }\n    const port = (await this._readBytes(2)).readUInt16BE(0);\n\n    this._buffer = Buffer.from([]);\n    this._offset = 0;\n    this._fence = 0;\n\n    return {\n      command,\n      host,\n      port\n    };\n  }\n\n  private async _readByte(): Promise<number> {\n    const buffer = await this._readBytes(1);\n    return buffer[0];\n  }\n\n  private async _readBytes(length: number): Promise<Buffer> {\n    this._fence = this._offset + length;\n    if (!this._buffer || this._buffer.length < this._fence)\n      await new Promise<void>(f => this._fenceCallback = f);\n    this._offset += length;\n    return this._buffer.slice(this._offset - length, this._offset);\n  }\n\n  private _writeBytes(buffer: Buffer) {\n    if (this._socket.writable)\n      this._socket.write(buffer);\n  }\n\n  private _onClose() {\n    this._client.onSocketClosed(this._uid);\n  }\n\n  private _onData(buffer: Buffer) {\n    this._buffer = Buffer.concat([this._buffer, buffer]);\n    if (this._fenceCallback && this._buffer.length >= this._fence) {\n      const callback = this._fenceCallback;\n      this._fenceCallback = undefined;\n      callback();\n    }\n  }\n\n  socketConnected(host: string, port: number) {\n    this._writeBytes(Buffer.from([\n      0x05,\n      SocksReply.Succeeded,\n      0x00, // RSV\n      0x01, // IPv4\n      ...parseIP(host), // Address\n      port << 8, port & 0xFF // Port\n    ]));\n    this._socket.on('data', data => this._client.onSocketData(this._uid, data));\n  }\n\n  socketFailed(errorCode: string) {\n    const buffer = Buffer.from([\n      0x05,\n      0,\n      0x00, // RSV\n      0x01, // IPv4\n      ...parseIP('0.0.0.0'), // Address\n      0, 0 // Port\n    ]);\n    switch (errorCode) {\n      case 'ENOENT':\n      case 'ENOTFOUND':\n      case 'ETIMEDOUT':\n      case 'EHOSTUNREACH':\n        buffer[1] = SocksReply.HostUnreachable;\n        break;\n      case 'ENETUNREACH':\n        buffer[1] = SocksReply.NetworkUnreachable;\n        break;\n      case 'ECONNREFUSED':\n        buffer[1] = SocksReply.ConnectionRefused;\n        break;\n    }\n    this._writeBytes(buffer);\n    this._socket.end();\n  }\n\n  sendData(data: Buffer) {\n    this._socket.write(data);\n  }\n\n  end() {\n    this._socket.end();\n  }\n\n  error(error: string) {\n    this._socket.destroy(new Error(error));\n  }\n}\n\nfunction parseIP(address: string): number[] {\n  if (!net.isIPv4(address))\n    throw new Error('IPv6 is not supported');\n  return address.split('.', 4).map(t => +t);\n}\n"],"file":"socksProxy.js"}