/**
 * Flowtype definitions for LexicalUtils
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  LexicalCommand,
  MutatedNodes,
  MutationListeners,
  NodeMutation,
  RegisteredNode,
  RegisteredNodes,
} from "./LexicalEditor";
import type { EditorState } from "./LexicalEditorState";
import type { LexicalNode, NodeKey } from "./LexicalNode";
import type {
  GridSelection,
  NodeSelection,
  PointType,
  RangeSelection,
} from "./LexicalSelection";
import type { RootNode } from "./nodes/LexicalRootNode";
import type { TextFormatType, TextNode } from "./nodes/LexicalTextNode";
import { Class } from "utility-types";
import { ElementNode } from ".";
import { LexicalEditor } from "./LexicalEditor";
declare export var emptyFunction: () => void;
declare export function resetRandomKey(): void;
declare export function generateRandomKey(): string;
declare export function getRegisteredNodeOrThrow(
  editor: LexicalEditor,
  nodeType: string
): RegisteredNode;
declare export var isArray: (arg: any) => boolean;
declare export var scheduleMicroTask: (fn: () => void) => void;
declare export function isSelectionWithinEditor(
  editor: LexicalEditor,
  anchorDOM: null | Node,
  focusDOM: null | Node
): boolean;
declare export function getNearestEditorFromDOMNode(
  node: Node | null
): LexicalEditor | null;
declare export function getTextDirection(text: string): "ltr" | "rtl" | null;
declare export function $isTokenOrInertOrSegmented(node: TextNode): boolean;
declare export function $isTokenOrInert(node: TextNode): boolean;
declare export function getDOMTextNode(element: Node | null): Text | null;
declare export function toggleTextFormatType(
  format: number,
  type: TextFormatType,
  alignWithFormat: null | number
): number;
declare export function $isLeafNode(node: LexicalNode | null | void): boolean;
declare export function $setNodeKey(
  node: LexicalNode,
  existingKey: NodeKey | null | void
): void;
declare export function removeFromParent(writableNode: LexicalNode): void;
declare export function internalMarkNodeAsDirty(node: LexicalNode): void;
declare export function internalMarkSiblingsAsDirty(node: LexicalNode): void;
declare export function $setCompositionKey(
  compositionKey: null | NodeKey
): void;
declare export function $getCompositionKey(): null | NodeKey;
declare export function $getNodeByKey<T: LexicalNode>(
  key: NodeKey,
  _editorState?: EditorState
): T | null;
declare export function getNodeFromDOMNode(
  dom: Node,
  editorState?: EditorState
): LexicalNode | null;
declare export function $getNearestNodeFromDOMNode(
  startingDOM: Node,
  editorState?: EditorState
): LexicalNode | null;
declare export function cloneDecorators(editor: LexicalEditor): {
  [key: NodeKey]: mixed,
};
declare export function getEditorStateTextContent(editorState: any): string;
declare export function markAllNodesAsDirty(
  editor: LexicalEditor,
  type: string
): void;
declare export function $getRoot(): RootNode;
declare export function internalGetRoot(editorState: EditorState): RootNode;
declare export function $setSelection(
  selection: null | RangeSelection | NodeSelection | GridSelection
): void;
declare export function $flushMutations(): void;
declare export function getNodeFromDOM(dom: Node): null | LexicalNode;
declare export function getTextNodeOffset(
  node: TextNode,
  moveSelectionToEnd: boolean
): number;
declare export function doesContainGrapheme(str: string): boolean;
declare export function getEditorsToPropagate(
  editor: LexicalEditor
): Array<LexicalEditor>;
declare export function createUID(): string;
declare export function $updateSelectedTextFromDOM(
  editor: LexicalEditor,
  isCompositionEnd: boolean,
  data?: string
): void;
declare export function $updateTextNodeFromDOMContent(
  textNode: TextNode,
  textContent: string,
  anchorOffset: null | number,
  focusOffset: null | number,
  compositionEnd: boolean
): void;
declare export function $shouldPreventDefaultAndInsertText(
  selection: RangeSelection,
  text: string
): boolean;
declare export function isTab(
  keyCode: number,
  altKey: boolean,
  ctrlKey: boolean,
  metaKey: boolean
): boolean;
declare export function isBold(
  keyCode: number,
  altKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isItalic(
  keyCode: number,
  altKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isUnderline(
  keyCode: number,
  altKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isParagraph(
  keyCode: number,
  shiftKey: boolean
): boolean;
declare export function isLineBreak(
  keyCode: number,
  shiftKey: boolean
): boolean;
declare export function isOpenLineBreak(
  keyCode: number,
  ctrlKey: boolean
): boolean;
declare export function isDeleteWordBackward(
  keyCode: number,
  altKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isDeleteWordForward(
  keyCode: number,
  altKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isDeleteLineBackward(
  keyCode: number,
  metaKey: boolean
): boolean;
declare export function isDeleteLineForward(
  keyCode: number,
  metaKey: boolean
): boolean;
declare export function isDeleteBackward(
  keyCode: number,
  altKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isDeleteForward(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isUndo(
  keyCode: number,
  shiftKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isRedo(
  keyCode: number,
  shiftKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isCopy(
  keyCode: number,
  shiftKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isCut(
  keyCode: number,
  shiftKey: boolean,
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isMoveBackward(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isMoveToStart(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isMoveForward(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isMoveToEnd(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isMoveUp(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isMoveDown(
  keyCode: number,
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isModifier(
  ctrlKey: boolean,
  shiftKey: boolean,
  altKey: boolean,
  metaKey: boolean
): boolean;
declare export function isSpace(keyCode: number): boolean;
declare export function controlOrMeta(
  metaKey: boolean,
  ctrlKey: boolean
): boolean;
declare export function isReturn(keyCode: number): boolean;
declare export function isBackspace(keyCode: number): boolean;
declare export function isEscape(keyCode: number): boolean;
declare export function isDelete(keyCode: number): boolean;
declare export function getCachedClassNameArray<T>(
  classNamesTheme: T,
  classNameThemeType: string
): Array<string>;
declare export function setMutatedNode(
  mutatedNodes: MutatedNodes,
  registeredNodes: RegisteredNodes,
  mutationListeners: MutationListeners,
  node: LexicalNode,
  mutation: NodeMutation
): void;
declare export function $nodesOfType<T: LexicalNode>(
  klass: Class<LexicalNode>
): Array<T>;
declare export function $getDecoratorNode(
  focus: PointType,
  isBackward: boolean
): null | LexicalNode;
declare export function isFirefoxClipboardEvents(): boolean;
declare export function dispatchCommand<P>(
  editor: LexicalEditor,
  type: LexicalCommand<P>,
  payload: P
): boolean;
declare export function $textContentRequiresDoubleLinebreakAtEnd(
  node: ElementNode
): boolean;
declare export function getElementByKeyOrThrow(
  editor: LexicalEditor,
  key: NodeKey
): HTMLElement;
declare export function scrollIntoViewIfNeeded(
  editor: LexicalEditor,
  anchor: PointType,
  rootElement: HTMLElement,
  tags: Set<string>
): void;
declare export function $hasUpdateTag(tag: string): boolean;
declare export function $addUpdateTag(tag: string): void;
