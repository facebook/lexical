/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  DOMConversionMap,
  EditorConfig,
  LexicalEditor,
  LexicalNode,
  NodeKey,
  ParagraphNode,
  RangeSelection,
  SerializedElementNode,
  SerializedTextNode,
  Spread,
} from "lexical";
import "prismjs/components/prism-clike";
import "prismjs/components/prism-javascript";
import "prismjs/components/prism-markup";
import "prismjs/components/prism-markdown";
import "prismjs/components/prism-c";
import "prismjs/components/prism-css";
import "prismjs/components/prism-objectivec";
import "prismjs/components/prism-sql";
import "prismjs/components/prism-python";
import "prismjs/components/prism-rust";
import "prismjs/components/prism-swift";
import { ElementNode, TextNode } from "lexical";
declare type SerializedCodeNode = Spread<
  {|
    language: string | null | void,
    type: "code",
    version: 1,
  |},
  SerializedElementNode
>;
declare type SerializedCodeHighlightNode = Spread<
  {|
    highlightType: string | null | void,
    type: "code-highlight",
    version: 1,
  |},
  SerializedTextNode
>;
declare export var getDefaultCodeLanguage: () => string;
declare export var getCodeLanguages: () => Array<string>;
declare export class CodeHighlightNode mixins TextNode {
  __highlightType: string | null | void;
  constructor(text: string, highlightType?: string, key?: NodeKey): this;
  static getType(): string;
  static clone(node: CodeHighlightNode): CodeHighlightNode;
  getHighlightType(): string | null | void;
  createDOM(config: EditorConfig): HTMLElement;
  updateDOM(
    prevNode: CodeHighlightNode,
    dom: HTMLElement,
    config: EditorConfig
  ): boolean;
  static importJSON(
    serializedNode: SerializedCodeHighlightNode
  ): CodeHighlightNode;
  exportJSON(): SerializedCodeHighlightNode;
  setFormat(format: number): this;
}
declare export function $createCodeHighlightNode(
  text: string,
  highlightType?: string
): CodeHighlightNode;
declare export function $isCodeHighlightNode(
  node: LexicalNode | CodeHighlightNode | null | void
): boolean;
declare export class CodeNode mixins ElementNode {
  __language: string | null | void;
  static getType(): string;
  static clone(node: CodeNode): CodeNode;
  constructor(language?: string | null | void, key?: NodeKey): this;
  createDOM(config: EditorConfig): HTMLElement;
  updateDOM(prevNode: CodeNode, dom: HTMLElement): boolean;
  static importDOM(): DOMConversionMap | null;
  static importJSON(serializedNode: SerializedCodeNode): CodeNode;
  exportJSON(): SerializedCodeNode;
  insertNewAfter(
    selection: RangeSelection
  ): null | ParagraphNode | CodeHighlightNode;
  canInsertTab(): boolean;
  canIndent(): false;
  collapseAtStart(): true;
  setLanguage(language: string): void;
  getLanguage(): string | null | void;
}
declare export function $createCodeNode(language?: string): CodeNode;
declare export function $isCodeNode(node: LexicalNode | null | void): boolean;
declare export function getFirstCodeHighlightNodeOfLine(
  anchor: LexicalNode
): CodeHighlightNode | null | void;
declare export function getLastCodeHighlightNodeOfLine(
  anchor: LexicalNode
): CodeHighlightNode | null | void;
declare export function getStartOfCodeInLine(anchor: LexicalNode): {|
  node: TextNode | null,
  offset: number,
|};
declare export function getEndOfCodeInLine(anchor: LexicalNode): {|
  node: TextNode | null,
  offset: number,
|};
declare export function registerCodeHighlighting(
  editor: LexicalEditor
): () => void;
