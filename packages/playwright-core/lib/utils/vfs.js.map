{"version":3,"sources":["../../src/utils/vfs.ts"],"names":["BaseFileSystem","read","entryPath","readStream","buffers","Promise","f","on","d","push","Buffer","concat","close","RealFileSystem","constructor","folder","_folder","entries","result","visit","dir","name","fs","readdirSync","fqn","path","join","statSync","isDirectory","isFile","entry","createReadStream","split","ZipFileSystem","fileName","_fileName","_zipFile","_entries","Map","_openedPromise","open","fulfill","reject","yauzl","autoClose","e","z","set","keys","get","r","openReadStream","error"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport stream from 'stream';\nimport yauzl from 'yauzl';\n\nexport interface VirtualFileSystem {\n  entries(): Promise<string[]>;\n  read(entry: string): Promise<Buffer>;\n  readStream(entryPath: string): Promise<stream.Readable>;\n  close(): void;\n}\n\nabstract class BaseFileSystem {\n\n  abstract readStream(entryPath: string): Promise<stream.Readable>;\n\n  async read(entryPath: string): Promise<Buffer> {\n    const readStream = await this.readStream(entryPath);\n    const buffers: Buffer[] = [];\n    return new Promise(f => {\n      readStream.on('data', d => buffers.push(d));\n      readStream.on('end', () => f(Buffer.concat(buffers)));\n    });\n  }\n\n  close() {\n  }\n}\n\nexport class RealFileSystem extends BaseFileSystem implements VirtualFileSystem {\n  private _folder: string;\n\n  constructor(folder: string) {\n    super();\n    this._folder = folder;\n  }\n\n  async entries(): Promise<string[]> {\n    const result: string[] = [];\n    const visit = (dir: string) => {\n      for (const name of fs.readdirSync(dir)) {\n        const fqn = path.join(dir, name);\n        if (fs.statSync(fqn).isDirectory())\n          visit(fqn);\n        if (fs.statSync(fqn).isFile())\n          result.push(fqn);\n      }\n    };\n    visit(this._folder);\n    return result;\n  }\n\n  async readStream(entry: string): Promise<stream.Readable> {\n    return fs.createReadStream(path.join(this._folder, ...entry.split('/')));\n  }\n}\n\nexport class ZipFileSystem extends BaseFileSystem implements VirtualFileSystem {\n  private _fileName: string;\n  private _zipFile: yauzl.ZipFile | undefined;\n  private _entries = new Map<string, yauzl.Entry>();\n  private _openedPromise: Promise<void>;\n\n  constructor(fileName: string) {\n    super();\n    this._fileName = fileName;\n    this._openedPromise = this.open();\n  }\n\n  async open() {\n    await new Promise<yauzl.ZipFile>((fulfill, reject) => {\n      yauzl.open(this._fileName, { autoClose: false }, (e, z) => {\n        if (e) {\n          reject(e);\n          return;\n        }\n        this._zipFile = z;\n        this._zipFile!.on('entry', (entry: yauzl.Entry) => {\n          this._entries.set(entry.fileName, entry);\n        });\n        this._zipFile!.on('end', fulfill);\n      });\n    });\n  }\n\n  async entries(): Promise<string[]> {\n    await this._openedPromise;\n    return [...this._entries.keys()];\n  }\n\n  async readStream(entryPath: string): Promise<stream.Readable> {\n    await this._openedPromise;\n    const entry = this._entries.get(entryPath)!;\n    return new Promise((f, r) => {\n      this._zipFile!.openReadStream(entry, (error, readStream) => {\n        if (error || !readStream) {\n          r(error || 'Entry not found');\n          return;\n        }\n        f(readStream);\n      });\n    });\n  }\n\n  override close() {\n    this._zipFile?.close();\n  }\n}\n"],"file":"vfs.js"}