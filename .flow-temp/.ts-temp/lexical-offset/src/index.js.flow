/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  EditorState,
  LexicalEditor,
  NodeKey,
  RangeSelection,
} from "lexical";
declare type OffsetElementNode = {|
  child: null | OffsetNode,
  end: number,
  key: NodeKey,
  next: null | OffsetNode,
  parent: null | OffsetElementNode,
  prev: null | OffsetNode,
  start: number,
  type: "element",
|};
declare type OffsetTextNode = {|
  child: null,
  end: number,
  key: NodeKey,
  next: null | OffsetNode,
  parent: null | OffsetElementNode,
  prev: null | OffsetNode,
  start: number,
  type: "text",
|};
declare type OffsetInlineNode = {|
  child: null,
  end: number,
  key: NodeKey,
  next: null | OffsetNode,
  parent: null | OffsetElementNode,
  prev: null | OffsetNode,
  start: number,
  type: "inline",
|};
declare type OffsetNode = OffsetElementNode | OffsetTextNode | OffsetInlineNode;
declare type OffsetMap = Map<NodeKey, OffsetNode>;
declare export class OffsetView {
  _offsetMap: OffsetMap;
  _firstNode: null | OffsetNode;
  _blockOffsetSize: number;
  constructor(
    offsetMap: OffsetMap,
    firstNode: null | OffsetNode,
    blockOffsetSize?: number
  ): this;
  createSelectionFromOffsets(
    originalStart: number,
    originalEnd: number,
    diffOffsetView?: OffsetView
  ): null | RangeSelection;
  getOffsetsFromSelection(selection: RangeSelection): [number, number];
}
declare export function $createOffsetView(
  editor: LexicalEditor,
  blockOffsetSize?: number,
  editorState?: EditorState
): OffsetView;
