{"version":3,"sources":["../../src/utils/debugLogger.ts"],"names":["debugLoggerColorMap","DebugLogger","constructor","_debuggers","Map","process","env","DEBUG_FILE","ansiRegex","RegExp","join","stream","fs","createWriteStream","debug","log","data","write","replace","name","message","cachedDebugger","get","set","color","isEnabled","enabled","debugLogger","kLogCount","RecentLogsCollector","_logs","push","length","splice","recentLogs","slice"],"mappings":";;;;;;;AAgBA;;AACA;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,MAAMA,mBAAmB,GAAG;AAC1B,SAAO,EADmB;AACf;AACX,cAAY,EAFc;AAEV;AAChB,aAAW,EAHe;AAGX;AACf,cAAY,EAJc;AAIV;AAChB,aAAW,CALe;AAKZ;AACd,WAAS,EANiB;AAMb;AACb,WAAS,GAPiB;AAOZ;AACd,qBAAmB,EARO;AAQH;AACvB,sBAAoB,GATM;AASD;AACzB,mBAAiB,GAVS,CAUJ;;AAVI,CAA5B;;AAcA,MAAMC,WAAN,CAAkB;AAGhBC,EAAAA,WAAW,GAAG;AAAA,SAFNC,UAEM,GAFO,IAAIC,GAAJ,EAEP;;AACZ,QAAIC,OAAO,CAACC,GAAR,CAAYC,UAAhB,EAA4B;AAC1B,YAAMC,SAAS,GAAG,IAAIC,MAAJ,CAAW,CAC3B,6FAD2B,EAE3B,0DAF2B,EAG3BC,IAH2B,CAGtB,GAHsB,CAAX,EAGL,GAHK,CAAlB;;AAIA,YAAMC,MAAM,GAAGC,YAAGC,iBAAH,CAAqBR,OAAO,CAACC,GAAR,CAAYC,UAAjC,CAAf;;AACCO,oBAAD,CAAeC,GAAf,GAAsBC,IAAD,IAAkB;AACrCL,QAAAA,MAAM,CAACM,KAAP,CAAaD,IAAI,CAACE,OAAL,CAAaV,SAAb,EAAwB,EAAxB,CAAb;AACAG,QAAAA,MAAM,CAACM,KAAP,CAAa,IAAb;AACD,OAHD;AAID;AACF;;AAEDF,EAAAA,GAAG,CAACI,IAAD,EAAgBC,OAAhB,EAAkD;AACnD,QAAIC,cAAc,GAAG,KAAKlB,UAAL,CAAgBmB,GAAhB,CAAoBH,IAApB,CAArB;;AACA,QAAI,CAACE,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG,oBAAO,MAAKF,IAAK,EAAjB,CAAjB;;AACA,WAAKhB,UAAL,CAAgBoB,GAAhB,CAAoBJ,IAApB,EAA0BE,cAA1B;;AACCA,MAAAA,cAAD,CAAwBG,KAAxB,GAAgCxB,mBAAmB,CAACmB,IAAD,CAAnD;AACD;;AACDE,IAAAA,cAAc,CAACD,OAAD,CAAd;AACD;;AAEDK,EAAAA,SAAS,CAACN,IAAD,EAAgB;AACvB,WAAOL,eAAMY,OAAN,CAAe,MAAKP,IAAK,EAAzB,CAAP;AACD;;AA7Be;;AAgCX,MAAMQ,WAAW,GAAG,IAAI1B,WAAJ,EAApB;;AAEP,MAAM2B,SAAS,GAAG,GAAlB;;AACO,MAAMC,mBAAN,CAA0B;AAAA;AAAA,SACvBC,KADuB,GACL,EADK;AAAA;;AAG/Bf,EAAAA,GAAG,CAACK,OAAD,EAAkB;AACnB,SAAKU,KAAL,CAAWC,IAAX,CAAgBX,OAAhB;;AACA,QAAI,KAAKU,KAAL,CAAWE,MAAX,KAAsBJ,SAAS,GAAG,CAAtC,EACE,KAAKE,KAAL,CAAWG,MAAX,CAAkB,CAAlB,EAAqBL,SAArB;AACH;;AAEDM,EAAAA,UAAU,GAAa;AACrB,QAAI,KAAKJ,KAAL,CAAWE,MAAX,GAAoBJ,SAAxB,EACE,OAAO,KAAKE,KAAL,CAAWK,KAAX,CAAiB,CAACP,SAAlB,CAAP;AACF,WAAO,KAAKE,KAAZ;AACD;;AAb8B","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport debug from 'debug';\nimport fs from 'fs';\n\nconst debugLoggerColorMap = {\n  'api': 45, // cyan\n  'protocol': 34, // green\n  'install': 34, // green\n  'download': 34, // green\n  'browser': 0, // reset\n  'proxy': 92, // purple\n  'error': 160, // red,\n  'channel:command': 33, // blue\n  'channel:response': 202, // orange\n  'channel:event': 207, // magenta\n};\nexport type LogName = keyof typeof debugLoggerColorMap;\n\nclass DebugLogger {\n  private _debuggers = new Map<string, debug.IDebugger>();\n\n  constructor() {\n    if (process.env.DEBUG_FILE) {\n      const ansiRegex = new RegExp([\n        '[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)',\n        '(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))'\n      ].join('|'), 'g');\n      const stream = fs.createWriteStream(process.env.DEBUG_FILE);\n      (debug as any).log = (data: string) => {\n        stream.write(data.replace(ansiRegex, ''));\n        stream.write('\\n');\n      };\n    }\n  }\n\n  log(name: LogName, message: string | Error | object) {\n    let cachedDebugger = this._debuggers.get(name);\n    if (!cachedDebugger) {\n      cachedDebugger = debug(`pw:${name}`);\n      this._debuggers.set(name, cachedDebugger);\n      (cachedDebugger as any).color = debugLoggerColorMap[name];\n    }\n    cachedDebugger(message);\n  }\n\n  isEnabled(name: LogName) {\n    return debug.enabled(`pw:${name}`);\n  }\n}\n\nexport const debugLogger = new DebugLogger();\n\nconst kLogCount = 150;\nexport class RecentLogsCollector {\n  private _logs: string[] = [];\n\n  log(message: string) {\n    this._logs.push(message);\n    if (this._logs.length === kLogCount * 2)\n      this._logs.splice(0, kLogCount);\n  }\n\n  recentLogs(): string[] {\n    if (this._logs.length > kLogCount)\n      return this._logs.slice(-kLogCount);\n    return this._logs;\n  }\n}\n"],"file":"debugLogger.js"}