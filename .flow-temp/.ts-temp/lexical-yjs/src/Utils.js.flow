/**
 * Flowtype definitions for Utils
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { Binding, YjsNode } from ".";
import type { LexicalNode, RangeSelection } from "lexical";
import { NodeKey } from "lexical";
import { Map as YMap, XmlElement, XmlText } from "yjs";
import { CollabDecoratorNode } from "./CollabDecoratorNode";
import { CollabElementNode } from "./CollabElementNode";
import { CollabLineBreakNode } from "./CollabLineBreakNode";
import { CollabTextNode } from "./CollabTextNode";
declare export function getIndexOfYjsNode(
  yjsParentNode: YjsNode,
  yjsNode: YjsNode
): number;
declare export function $getNodeByKeyOrThrow(key: NodeKey): LexicalNode;
declare export function $createCollabNodeFromLexicalNode(
  binding: Binding,
  lexicalNode: LexicalNode,
  parent: CollabElementNode
):
  | CollabElementNode
  | CollabTextNode
  | CollabLineBreakNode
  | CollabDecoratorNode;
declare export function getOrInitCollabNodeFromSharedType(
  binding: Binding,
  sharedType: XmlText | YMap<mixed> | XmlElement,
  parent?: CollabElementNode
):
  | CollabElementNode
  | CollabTextNode
  | CollabLineBreakNode
  | CollabDecoratorNode;
declare export function createLexicalNodeFromCollabNode(
  binding: Binding,
  collabNode:
    | CollabElementNode
    | CollabTextNode
    | CollabDecoratorNode
    | CollabLineBreakNode,
  parentKey: NodeKey
): LexicalNode;
declare export function syncPropertiesFromYjs(
  binding: Binding,
  sharedType: XmlText | YMap<mixed> | XmlElement,
  lexicalNode: LexicalNode,
  keysChanged: null | Set<string>
): void;
declare export function syncPropertiesFromLexical(
  binding: Binding,
  sharedType: XmlText | YMap<mixed> | XmlElement,
  prevLexicalNode: null | LexicalNode,
  nextLexicalNode: LexicalNode
): void;
declare export function spliceString(
  str: string,
  index: number,
  delCount: number,
  newText: string
): string;
declare export function getPositionFromElementAndOffset(
  node: CollabElementNode,
  offset: number,
  boundaryIsEdge: boolean
): {|
  length: number,
  node:
    | CollabElementNode
    | CollabTextNode
    | CollabDecoratorNode
    | CollabLineBreakNode
    | null,
  nodeIndex: number,
  offset: number,
|};
declare export function doesSelectionNeedRecovering(
  selection: RangeSelection
): boolean;
declare export function syncWithTransaction(
  binding: Binding,
  fn: () => void
): void;
