/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { ElementNode, LexicalEditor, RootNode } from "lexical";
import { TextNode } from "lexical";
import { Class } from "utility-types";
export type TextNodeWithOffset = {
  node: TextNode,
  offset: number,
  ...
};
declare export function $findTextIntersectionFromCharacters(
  root: RootNode,
  targetCharacters: number
): null | {
  node: TextNode,
  offset: number,
  ...
};
declare export function $joinTextNodesInElementNode(
  elementNode: ElementNode,
  separator: string,
  stopAt: TextNodeWithOffset
): string;
declare export function $findNodeWithOffsetFromJoinedText(
  offsetInJoinedText: number,
  joinedTextLength: number,
  separatorLength: number,
  elementNode: ElementNode
): TextNodeWithOffset | null;
declare export function $isRootTextContentEmpty(
  isEditorComposing: boolean,
  trim?: boolean
): boolean;
declare export function $isRootTextContentEmptyCurry(
  isEditorComposing: boolean,
  trim?: boolean
): () => boolean;
declare export function $rootTextContent(): string;
declare export function $canShowPlaceholder(isComposing: boolean): boolean;
declare export function $canShowPlaceholderCurry(
  isEditorComposing: boolean
): () => boolean;
export type EntityMatch = {
  end: number,
  start: number,
  ...
};
declare export function registerLexicalTextEntity<N: TextNode>(
  editor: LexicalEditor,
  getMatch: (text: string) => null | EntityMatch,
  targetNode: Class<N>,
  createNode: (textNode: TextNode) => N
): Array<() => void>;
