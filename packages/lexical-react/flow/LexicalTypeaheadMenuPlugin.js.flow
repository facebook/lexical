/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type {LexicalEditor, NodeKey, TextNode} from 'lexical';
import * as React from 'react';

export type QueryMatch = {
  leadOffset: number,
  matchingString: string,
  replaceableString: string,
};

export type Resolution = {
  match: QueryMatch,
  getRect: () => ClientRect,
};

export const PUNCTUATION: string =
  '\\.,\\+\\*\\?\\$\\@\\|#{}\\(\\)\\^\\-\\[\\]\\\\/!%\'"~=<>_:;';

declare export class TypeaheadOption {
  key: string;
  ref: React$ElementRef<HTMLElement | null>;
  constructor(key: string): void;
  setRefElement(element: HTMLElement | null): void;
}

export type MenuRenderFn<TOption> = (
  anchorElement: HTMLElement | null,
  itemProps: {
    selectedIndex: number | null,
    selectOptionAndCleanUp: (option: TOption) => void,
    setHighlightedIndex: (index: number) => void,
  },
  matchingString: string,
) => React.Portal | React.MixedElement | null;

const scrollIntoViewIfNeeded = (target: HTMLElement) => {
  const container = document.getElementById('typeahead-menu');
  if (container) {
    const containerRect = container.getBoundingClientRect();
    const targetRect = target.getBoundingClientRect();
    if (targetRect.bottom > containerRect.bottom) {
      target.scrollIntoView(false);
    } else if (targetRect.top < containerRect.top) {
      target.scrollIntoView();
    }
  }
};

declare export function useBasicTypeaheadTriggerMatch(
  trigger: string,
  options: {minLength?: number, maxLength?: number},
): TriggerFn;

export type TypeaheadMenuPluginArgs<TOption> = {
  onQueryChange: (matchingString: string | null) => void,
  onSelectOption: (
    option: TOption,
    textNodeContainingQuery: TextNode | null,
    closeMenu: () => void,
    matchingString: string,
  ) => void,
  options: Array<TOption>,
  menuRenderFn: MenuRenderFn<TOption>,
  triggerFn: TriggerFn,
};

export type TriggerFn = (
  text: string,
  editor: LexicalEditor,
) => QueryMatch | null;

declare export function LexicalTypeaheadMenuPlugin<TOption>(
  options: TypeaheadMenuPluginArgs<TOption>,
): React.MixedElement | null;

type NodeMenuPluginArgs<TOption> = {
  onSelectOption: (
    option: TOption,
    textNodeContainingQuery: TextNode | null,
    closeMenu: () => void,
    matchingString: string,
  ) => void,
  options: Array<TOption>,
  nodeKey: NodeKey | null,
  onClose: () => void,
  menuRenderFn: MenuRenderFn<TOption>,
};

declare export function LexicalNodeMenuPlugin<TOption>(
  options: NodeMenuPluginArgs<TOption>,
): React.MixedElement | null;
