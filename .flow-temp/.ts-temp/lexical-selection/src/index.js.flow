/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  ElementNode,
  GridSelection,
  LexicalEditor,
  LexicalNode,
  NodeKey,
  NodeSelection,
  Point,
  RangeSelection,
  TextNode,
} from "lexical";
declare export function $cloneWithProperties<T: LexicalNode>(node: T): T;
declare export function $cloneContents(
  selection: RangeSelection | NodeSelection | GridSelection
): {|
  nodeMap: Array<[NodeKey, LexicalNode]>,
  range: Array<NodeKey>,
|};
declare export function getStyleObjectFromCSS(
  css: string
): { [key: string]: string } | null;
declare export function $patchStyleText(
  selection: RangeSelection | GridSelection,
  patch: { [key: string]: string }
): void;
declare export function $getSelectionStyleValueForProperty(
  selection: RangeSelection,
  styleProperty: string,
  defaultValue?: string
): string;
declare export function $moveCaretSelection(
  selection: RangeSelection,
  isHoldingShift: boolean,
  isBackward: boolean,
  granularity: "character" | "word" | "lineboundary"
): void;
declare export function $isParentElementRTL(selection: RangeSelection): boolean;
declare export function $moveCharacter(
  selection: RangeSelection,
  isHoldingShift: boolean,
  isBackward: boolean
): void;
declare export function $selectAll(selection: RangeSelection): void;
declare export function $wrapLeafNodesInElements(
  selection: RangeSelection,
  createElement: () => ElementNode,
  wrappingElement?: ElementNode
): void;
declare export function $isAtNodeEnd(point: Point): boolean;
declare export function $shouldOverrideDefaultCharacterSelection(
  selection: RangeSelection,
  isBackward: boolean
): boolean;
declare export function createDOMRange(
  editor: LexicalEditor,
  anchorNode: LexicalNode,
  _anchorOffset: number,
  focusNode: LexicalNode,
  _focusOffset: number
): Range | null;
declare export function createRectsFromDOMRange(
  editor: LexicalEditor,
  range: Range
): Array<ClientRect>;
declare export function trimTextContentFromAnchor(
  editor: LexicalEditor,
  anchor: Point,
  delCount: number
): void;
declare export function $sliceSelectedTextNodeContent(
  selection: RangeSelection | GridSelection | NodeSelection,
  textNode: TextNode
): LexicalNode;
