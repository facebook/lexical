{"version":3,"sources":["../../src/utils/processLauncher.ts"],"names":["gracefullyCloseSet","Set","gracefullyCloseAll","Promise","all","Array","from","map","gracefullyClose","catch","e","maxListeners","process","getMaxListeners","setMaxListeners","Math","max","launchProcess","options","stdio","log","command","args","join","spawnOptions","detached","platform","env","cwd","shell","spawnedProcess","childProcess","spawn","cleanup","pid","errors","tempDirectories","i","length","on","failed","failedPromise","f","r","once","error","Error","then","reject","stdout","readline","createInterface","input","data","stderr","processClosed","fulfillClose","waitForClose","fulfillCleanup","waitForCleanup","exitCode","signal","eventsHelper","removeEventListeners","listeners","delete","onExit","addEventListener","killProcessAndCleanup","handleSIGINT","push","setTimeout","exit","handleSIGTERM","handleSIGHUP","add","gracefullyClosing","killProcess","attemptToGracefullyClose","killed","execSync","toString","kill","dir","rimraf","sync","maxBusyTries","killAndWait","launchedProcess","envArrayToObject","result","name","value"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as childProcess from 'child_process';\nimport * as readline from 'readline';\nimport { eventsHelper } from './eventsHelper';\nimport { isUnderTest, removeFolders } from './utils';\nimport rimraf from 'rimraf';\n\nexport type Env = {[key: string]: string | number | boolean | undefined};\n\nexport type LaunchProcessOptions = {\n  command: string,\n  args?: string[],\n  env?: Env,\n  shell?: boolean,\n\n  handleSIGINT?: boolean,\n  handleSIGTERM?: boolean,\n  handleSIGHUP?: boolean,\n  stdio: 'pipe' | 'stdin',\n  tempDirectories: string[],\n\n  cwd?: string,\n\n  // Note: attemptToGracefullyClose should reject if it does not close the browser.\n  attemptToGracefullyClose: () => Promise<any>,\n  onExit: (exitCode: number | null, signal: string | null) => void,\n  log: (message: string) => void,\n};\n\ntype LaunchResult = {\n  launchedProcess: childProcess.ChildProcess,\n  gracefullyClose: () => Promise<void>,\n  kill: () => Promise<void>,\n};\n\nexport const gracefullyCloseSet = new Set<() => Promise<void>>();\n\nexport async function gracefullyCloseAll() {\n  await Promise.all(Array.from(gracefullyCloseSet).map(gracefullyClose => gracefullyClose().catch(e => {})));\n}\n\n// We currently spawn a process per page when recording video in Chromium.\n//  This triggers \"too many listeners\" on the process object once you have more than 10 pages open.\nconst maxListeners = process.getMaxListeners();\nif (maxListeners !== 0)\n  process.setMaxListeners(Math.max(maxListeners || 0, 100));\n\nexport async function launchProcess(options: LaunchProcessOptions): Promise<LaunchResult> {\n  const stdio: ('ignore' | 'pipe')[] = options.stdio === 'pipe' ? ['ignore', 'pipe', 'pipe', 'pipe', 'pipe'] : ['pipe', 'pipe', 'pipe'];\n  options.log(`<launching> ${options.command} ${options.args ? options.args.join(' ') : ''}`);\n  const spawnOptions: childProcess.SpawnOptions = {\n    // On non-windows platforms, `detached: true` makes child process a leader of a new\n    // process group, making it possible to kill child process tree with `.kill(-pid)` command.\n    // @see https://nodejs.org/api/child_process.html#child_process_options_detached\n    detached: process.platform !== 'win32',\n    env: (options.env as {[key: string]: string}),\n    cwd: options.cwd,\n    shell: options.shell,\n    stdio,\n  };\n  const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);\n\n  const cleanup = async () => {\n    options.log(`[pid=${spawnedProcess.pid || 'N/A'}] starting temporary directories cleanup`);\n    const errors = await removeFolders(options.tempDirectories);\n    for (let i = 0; i < options.tempDirectories.length; ++i) {\n      if (errors[i])\n        options.log(`[pid=${spawnedProcess.pid || 'N/A'}] exception while removing ${options.tempDirectories[i]}: ${errors[i]}`);\n    }\n    options.log(`[pid=${spawnedProcess.pid || 'N/A'}] finished temporary directories cleanup`);\n  };\n\n  // Prevent Unhandled 'error' event.\n  spawnedProcess.on('error', () => {});\n\n  if (!spawnedProcess.pid) {\n    let failed: (e: Error) => void;\n    const failedPromise = new Promise<Error>((f, r) => failed = f);\n    spawnedProcess.once('error', error => {\n      failed(new Error('Failed to launch: ' + error));\n    });\n    return cleanup().then(() => failedPromise).then(e => Promise.reject(e));\n  }\n  options.log(`<launched> pid=${spawnedProcess.pid}`);\n\n  const stdout = readline.createInterface({ input: spawnedProcess.stdout! });\n  stdout.on('line', (data: string) => {\n    options.log(`[pid=${spawnedProcess.pid}][out] ` + data);\n  });\n\n  const stderr = readline.createInterface({ input: spawnedProcess.stderr! });\n  stderr.on('line', (data: string) => {\n    options.log(`[pid=${spawnedProcess.pid}][err] ` + data);\n  });\n\n  let processClosed = false;\n  let fulfillClose = () => {};\n  const waitForClose = new Promise<void>(f => fulfillClose = f);\n  let fulfillCleanup = () => {};\n  const waitForCleanup = new Promise<void>(f => fulfillCleanup = f);\n  spawnedProcess.once('exit', (exitCode, signal) => {\n    options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);\n    processClosed = true;\n    eventsHelper.removeEventListeners(listeners);\n    gracefullyCloseSet.delete(gracefullyClose);\n    options.onExit(exitCode, signal);\n    fulfillClose();\n    // Cleanup as process exits.\n    cleanup().then(fulfillCleanup);\n  });\n\n  const listeners = [ eventsHelper.addEventListener(process, 'exit', killProcessAndCleanup) ];\n  if (options.handleSIGINT) {\n    listeners.push(eventsHelper.addEventListener(process, 'SIGINT', () => {\n      gracefullyClose().then(() => {\n        // Give tests a chance to dispatch any async calls.\n        if (isUnderTest())\n          setTimeout(() => process.exit(130), 0);\n        else\n          process.exit(130);\n      });\n    }));\n  }\n  if (options.handleSIGTERM)\n    listeners.push(eventsHelper.addEventListener(process, 'SIGTERM', gracefullyClose));\n  if (options.handleSIGHUP)\n    listeners.push(eventsHelper.addEventListener(process, 'SIGHUP', gracefullyClose));\n  gracefullyCloseSet.add(gracefullyClose);\n\n  let gracefullyClosing = false;\n  async function gracefullyClose(): Promise<void> {\n    gracefullyCloseSet.delete(gracefullyClose);\n    // We keep listeners until we are done, to handle 'exit' and 'SIGINT' while\n    // asynchronously closing to prevent zombie processes. This might introduce\n    // reentrancy to this function, for example user sends SIGINT second time.\n    // In this case, let's forcefully kill the process.\n    if (gracefullyClosing) {\n      options.log(`[pid=${spawnedProcess.pid}] <forecefully close>`);\n      killProcess();\n      await waitForClose;  // Ensure the process is dead and we called options.onkill.\n      return;\n    }\n    gracefullyClosing = true;\n    options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);\n    await options.attemptToGracefullyClose().catch(() => killProcess());\n    await waitForCleanup;  // Ensure the process is dead and we have cleaned up.\n    options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);\n  }\n\n  // This method has to be sync to be used as 'exit' event handler.\n  function killProcess() {\n    options.log(`[pid=${spawnedProcess.pid}] <kill>`);\n    eventsHelper.removeEventListeners(listeners);\n    if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {\n      options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);\n      // Force kill the browser.\n      try {\n        if (process.platform === 'win32') {\n          const stdout = childProcess.execSync(`taskkill /pid ${spawnedProcess.pid} /T /F /FI \"MEMUSAGE gt 0\"`);\n          options.log(`[pid=${spawnedProcess.pid}] taskkill output: ${stdout.toString()}`);\n        } else {\n          process.kill(-spawnedProcess.pid, 'SIGKILL');\n        }\n      } catch (e) {\n        options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);\n        // the process might have already stopped\n      }\n    } else {\n      options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);\n    }\n  }\n\n  function killProcessAndCleanup() {\n    killProcess();\n    options.log(`[pid=${spawnedProcess.pid || 'N/A'}] starting temporary directories cleanup`);\n    for (const dir of options.tempDirectories) {\n      try {\n        rimraf.sync(dir, { maxBusyTries: 10 });\n      } catch (e) {\n        options.log(`[pid=${spawnedProcess.pid || 'N/A'}] exception while removing ${dir}: ${e}`);\n      }\n    }\n    options.log(`[pid=${spawnedProcess.pid || 'N/A'}] finished temporary directories cleanup`);\n  }\n\n  function killAndWait() {\n    killProcess();\n    return waitForCleanup;\n  }\n\n  return { launchedProcess: spawnedProcess, gracefullyClose, kill: killAndWait };\n}\n\nexport function envArrayToObject(env: { name: string, value: string }[]): Env {\n  const result: Env = {};\n  for (const { name, value } of env)\n    result[name] = value;\n  return result;\n}\n"],"file":"processLauncher.js"}