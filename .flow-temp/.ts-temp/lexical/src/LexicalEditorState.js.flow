/**
 * Flowtype definitions for LexicalEditorState
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { LexicalEditor } from "./LexicalEditor";
import type { NodeMap } from "./LexicalNode";
import type {
  GridSelection,
  NodeSelection,
  RangeSelection,
} from "./LexicalSelection";
import type { SerializedRootNode } from "./nodes/LexicalRootNode";
export interface SerializedEditorState {
  root: SerializedRootNode;
}
declare export function editorStateHasDirtySelection(
  editorState: EditorState,
  editor: LexicalEditor
): boolean;
declare export function cloneEditorState(current: EditorState): EditorState;
declare export function createEmptyEditorState(): EditorState;
declare export class EditorState {
  _nodeMap: NodeMap;
  _selection: null | RangeSelection | NodeSelection | GridSelection;
  _flushSync: boolean;
  _readOnly: boolean;
  constructor(
    nodeMap: NodeMap,
    selection?: RangeSelection | NodeSelection | GridSelection | null
  ): this;
  isEmpty(): boolean;
  read<V>(callbackFn: () => V): V;
  clone(
    selection?: RangeSelection | NodeSelection | GridSelection | null
  ): EditorState;
  toJSON(): SerializedEditorState;
}
