{"version":3,"sources":["../../src/utils/eventsHelper.ts"],"names":["EventsHelper","addEventListener","emitter","eventName","handler","on","removeEventListeners","listeners","listener","removeListener","splice","length","eventsHelper"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA,MAAMA,YAAN,CAAmB;AACM,SAAhBC,gBAAgB,CACrBC,OADqB,EAErBC,SAFqB,EAGrBC,OAHqB,EAGkC;AACvDF,IAAAA,OAAO,CAACG,EAAR,CAAWF,SAAX,EAAsBC,OAAtB;AACA,WAAO;AAAEF,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAP;AACD;;AAE0B,SAApBE,oBAAoB,CAACC,SAAD,EAIrB;AACJ,SAAK,MAAMC,QAAX,IAAuBD,SAAvB,EACEC,QAAQ,CAACN,OAAT,CAAiBO,cAAjB,CAAgCD,QAAQ,CAACL,SAAzC,EAAoDK,QAAQ,CAACJ,OAA7D;;AACFG,IAAAA,SAAS,CAACG,MAAV,CAAiB,CAAjB,EAAoBH,SAAS,CAACI,MAA9B;AACD;;AAjBgB;;AAoBZ,MAAMC,YAAY,GAAGZ,YAArB","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\n\nexport type RegisteredListener = {\n  emitter: EventEmitter;\n  eventName: (string | symbol);\n  handler: (...args: any[]) => void;\n};\n\nclass EventsHelper {\n  static addEventListener(\n    emitter: EventEmitter,\n    eventName: (string | symbol),\n    handler: (...args: any[]) => void): RegisteredListener {\n    emitter.on(eventName, handler);\n    return { emitter, eventName, handler };\n  }\n\n  static removeEventListeners(listeners: Array<{\n      emitter: EventEmitter;\n      eventName: (string | symbol);\n      handler: (...args: any[]) => void;\n    }>) {\n    for (const listener of listeners)\n      listener.emitter.removeListener(listener.eventName, listener.handler);\n    listeners.splice(0, listeners.length);\n  }\n}\n\nexport const eventsHelper = EventsHelper;\n"],"file":"eventsHelper.js"}