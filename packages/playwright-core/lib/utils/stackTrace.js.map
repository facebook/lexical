{"version":3,"sources":["../../src/utils/stackTrace.ts"],"names":["stackUtils","StackUtils","rewriteErrorMessage","e","newMessage","lines","stack","split","filter","l","startsWith","message","errorTitle","name","length","join","CORE_DIR","path","resolve","__dirname","CLIENT_LIB","CLIENT_SRC","captureStackTrace","stackTraceLimit","Error","error","isTesting","parsedFrames","map","line","frame","parseLine","file","fileName","process","cwd","includes","inClient","parsed","column","function","frameText","Boolean","apiName","allFrames","TRAP","expectIndex","findIndex","f","text","aliasIndex","indexOf","substring","slice","i","toLowerCase","p","frames","frameTexts","splitErrorMessage","separationIdx"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport { StackFrame } from '../protocol/channels';\nimport StackUtils from 'stack-utils';\nimport { isUnderTest } from './utils';\n\nconst stackUtils = new StackUtils();\n\nexport function rewriteErrorMessage<E extends Error>(e: E, newMessage: string): E {\n  const lines: string[] = (e.stack?.split('\\n') || []).filter(l => l.startsWith('    at '));\n  e.message = newMessage;\n  const errorTitle = `${e.name}: ${e.message}`;\n  if (lines.length)\n    e.stack = `${errorTitle}\\n${lines.join('\\n')}`;\n  return e;\n}\n\nconst CORE_DIR = path.resolve(__dirname, '..', '..');\nconst CLIENT_LIB = path.join(CORE_DIR, 'lib', 'client');\nconst CLIENT_SRC = path.join(CORE_DIR, 'src', 'client');\n\nexport type ParsedStackTrace = {\n  allFrames: StackFrame[];\n  frames: StackFrame[];\n  frameTexts: string[];\n  apiName: string;\n};\n\nexport function captureStackTrace(): ParsedStackTrace {\n  const stackTraceLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 30;\n  const error = new Error();\n  const stack = error.stack!;\n  Error.stackTraceLimit = stackTraceLimit;\n\n  const isTesting = isUnderTest();\n  type ParsedFrame = {\n    frame: StackFrame;\n    frameText: string;\n    inClient: boolean;\n  };\n  let parsedFrames = stack.split('\\n').map(line => {\n    const frame = stackUtils.parseLine(line);\n    if (!frame || !frame.file)\n      return null;\n    if (frame.file.startsWith('internal'))\n      return null;\n    const fileName = path.resolve(process.cwd(), frame.file);\n    if (isTesting && fileName.includes(path.join('playwright', 'tests', 'config', 'coverage.js')))\n      return null;\n    const inClient = fileName.startsWith(CLIENT_LIB) || fileName.startsWith(CLIENT_SRC);\n    const parsed: ParsedFrame = {\n      frame: {\n        file: fileName,\n        line: frame.line,\n        column: frame.column,\n        function: frame.function,\n      },\n      frameText: line,\n      inClient\n    };\n    return parsed;\n  }).filter(Boolean) as ParsedFrame[];\n\n  let apiName = '';\n  const allFrames = parsedFrames;\n\n  // expect matchers have the following stack structure:\n  // at Object.__PWTRAP__[expect.toHaveText] (...)\n  // at __EXTERNAL_MATCHER_TRAP__ (...)\n  // at Object.throwingMatcher [as toHaveText] (...)\n  const TRAP = '__PWTRAP__[';\n  const expectIndex = parsedFrames.findIndex(f => f.frameText.includes(TRAP));\n  if (expectIndex !== -1) {\n    const text = parsedFrames[expectIndex].frameText;\n    const aliasIndex = text.indexOf(TRAP);\n    apiName = text.substring(aliasIndex + TRAP.length, text.indexOf(']'));\n    parsedFrames = parsedFrames.slice(expectIndex + 3);\n  } else {\n    // Deepest transition between non-client code calling into client code\n    // is the api entry.\n    for (let i = 0; i < parsedFrames.length - 1; i++) {\n      if (parsedFrames[i].inClient && !parsedFrames[i + 1].inClient) {\n        const frame = parsedFrames[i].frame;\n        apiName = frame.function ? frame.function[0].toLowerCase() + frame.function.slice(1) : '';\n        parsedFrames = parsedFrames.slice(i + 1);\n        break;\n      }\n    }\n  }\n\n  return {\n    allFrames: allFrames.map(p => p.frame),\n    frames: parsedFrames.map(p => p.frame),\n    frameTexts: parsedFrames.map(p => p.frameText),\n    apiName\n  };\n}\n\nexport function splitErrorMessage(message: string): { name: string, message: string } {\n  const separationIdx = message.indexOf(':');\n  return {\n    name: separationIdx !== -1 ? message.slice(0, separationIdx) : '',\n    message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message,\n  };\n}\n"],"file":"stackTrace.js"}