/**
 * Flowtype definitions for LexicalTableSelection
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type {
  GridSelection,
  LexicalEditor,
  NodeKey,
  TextFormatType,
} from "lexical";
export type Cell = {|
  elem: HTMLElement,
  highlighted: boolean,
  x: number,
  y: number,
|};
export type Cells = Array<Array<Cell>>;
export type Grid = {|
  cells: Cells,
  columns: number,
  rows: number,
|};
declare export class TableSelection {
  currentX: number;
  currentY: number;
  listenersToRemove: Set<() => void>;
  domListeners: Set<() => void>;
  grid: Grid;
  isHighlightingCells: boolean;
  startX: number;
  startY: number;
  tableNodeKey: NodeKey;
  anchorCell: Cell | null;
  focusCell: Cell | null;
  anchorCellNodeKey: NodeKey | null;
  focusCellNodeKey: NodeKey | null;
  editor: LexicalEditor;
  gridSelection: GridSelection | null;
  hasHijackedSelectionStyles: boolean;
  constructor(editor: LexicalEditor, tableNodeKey: string): this;
  getGrid(): Grid;
  removeListeners(): void;
  trackTableGrid(): void;
  clearHighlight(): void;
  enableHighlightStyle(): void;
  disableHighlightStyle(): void;
  updateTableGridSelection(selection: GridSelection | null): void;
  adjustFocusCellForSelection(cell: Cell, ignoreStart?: boolean): void;
  setAnchorCellForSelection(cell: Cell): void;
  formatCells(type: TextFormatType): void;
  clearText(): void;
}
