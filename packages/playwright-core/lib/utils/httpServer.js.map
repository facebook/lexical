{"version":3,"sources":["../../src/utils/httpServer.ts"],"names":["HttpServer","constructor","_server","_urlPrefix","_port","_routes","_activeSockets","Set","http","createServer","_onRequest","bind","createWebSocketServer","WebSocketServer","server","routePrefix","prefix","handler","push","routePath","path","exact","port","start","console","assert","on","socket","add","once","delete","listen","Promise","cb","address","stop","destroy","close","urlPrefix","serveFile","response","absoluteFilePath","headers","content","fs","readFileSync","statusCode","contentType","mime","getType","extname","setHeader","byteLength","name","value","Object","entries","end","e","serveVirtualFile","vfs","entry","read","request","origin","method","writeHead","url","URL","route","pathname","startsWith"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\nimport fs from 'fs';\nimport path from 'path';\nimport { Server as WebSocketServer } from 'ws';\nimport * as mime from 'mime';\nimport { assert } from './utils';\nimport { VirtualFileSystem } from './vfs';\n\nexport type ServerRouteHandler = (request: http.IncomingMessage, response: http.ServerResponse) => boolean;\n\nexport class HttpServer {\n  private _server: http.Server;\n  private _urlPrefix: string;\n  private _port: number = 0;\n  private _routes: { prefix?: string, exact?: string, handler: ServerRouteHandler }[] = [];\n  private _activeSockets = new Set<import('net').Socket>();\n  constructor() {\n    this._urlPrefix = '';\n    this._server = http.createServer(this._onRequest.bind(this));\n  }\n\n  createWebSocketServer(): WebSocketServer {\n    return new WebSocketServer({ server: this._server });\n  }\n\n  routePrefix(prefix: string, handler: ServerRouteHandler) {\n    this._routes.push({ prefix, handler });\n  }\n\n  routePath(path: string, handler: ServerRouteHandler) {\n    this._routes.push({ exact: path, handler });\n  }\n\n  port(): number {\n    return this._port;\n  }\n\n  async start(port?: number): Promise<string> {\n    console.assert(!this._urlPrefix, 'server already started');\n    this._server.on('connection', socket => {\n      this._activeSockets.add(socket);\n      socket.once('close', () => this._activeSockets.delete(socket));\n    });\n    this._server.listen(port);\n    await new Promise(cb => this._server!.once('listening', cb));\n    const address = this._server.address();\n    if (typeof address === 'string') {\n      this._urlPrefix = address;\n    } else {\n      assert(address, 'Could not bind server socket');\n      this._port = address.port;\n      this._urlPrefix = `http://127.0.0.1:${address.port}`;\n    }\n    return this._urlPrefix;\n  }\n\n  async stop() {\n    for (const socket of this._activeSockets)\n      socket.destroy();\n    await new Promise(cb => this._server!.close(cb));\n  }\n\n  urlPrefix(): string {\n    return this._urlPrefix;\n  }\n\n  serveFile(response: http.ServerResponse, absoluteFilePath: string, headers?: { [name: string]: string }): boolean {\n    try {\n      const content = fs.readFileSync(absoluteFilePath);\n      response.statusCode = 200;\n      const contentType = mime.getType(path.extname(absoluteFilePath)) || 'application/octet-stream';\n      response.setHeader('Content-Type', contentType);\n      response.setHeader('Content-Length', content.byteLength);\n      for (const [name, value] of Object.entries(headers || {}))\n        response.setHeader(name, value);\n      response.end(content);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async serveVirtualFile(response: http.ServerResponse, vfs: VirtualFileSystem, entry: string, headers?: { [name: string]: string }) {\n    try {\n      const content = await vfs.read(entry);\n      response.statusCode = 200;\n      const contentType = mime.getType(path.extname(entry)) || 'application/octet-stream';\n      response.setHeader('Content-Type', contentType);\n      response.setHeader('Content-Length', content.byteLength);\n      for (const [name, value] of Object.entries(headers || {}))\n        response.setHeader(name, value);\n      response.end(content);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private _onRequest(request: http.IncomingMessage, response: http.ServerResponse) {\n    response.setHeader('Access-Control-Allow-Origin', '*');\n    response.setHeader('Access-Control-Request-Method', '*');\n    response.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');\n    if (request.headers.origin)\n      response.setHeader('Access-Control-Allow-Headers', request.headers.origin);\n\n    if (request.method === 'OPTIONS') {\n      response.writeHead(200);\n      response.end();\n      return;\n    }\n\n    request.on('error', () => response.end());\n    try {\n      if (!request.url) {\n        response.end();\n        return;\n      }\n      const url = new URL('http://localhost' + request.url);\n      for (const route of this._routes) {\n        if (route.exact && url.pathname === route.exact && route.handler(request, response))\n          return;\n        if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response))\n          return;\n      }\n      response.statusCode = 404;\n      response.end();\n    } catch (e) {\n      response.end();\n    }\n  }\n}\n"],"file":"httpServer.js"}