const puppeteer = require('puppeteer');
const {expectHTML, composition, keydown, select} = require('./test-helpers');

(async () => {
  const browser = await puppeteer.launch({headless: false});
  const page = await browser.newPage();
  await page.goto('http://localhost:3000');
  await page.focus('div.editor');
  // await debug(page);

  await page.focus('div.editor');
  await select(page, [1, 0, 0], 1, [1, 0, 0], 1);
  await keydown(page, 'Shift', false);
  await keydown(page, 'H', false);
  await page.keyboard.up('Shift');
  await page.keyboard.up('h');
  await keydown(page, 'e', false);
  await select(page, [0, 0, 0], 2, [0, 0, 0], 2);
  await page.keyboard.up('e');
  await keydown(page, 'l', false);
  await select(page, [0, 0, 0], 3, [0, 0, 0], 3);
  await page.keyboard.up('l');
  await keydown(page, 'l', false);
  await select(page, [0, 0, 0], 4, [0, 0, 0], 4);
  await page.keyboard.up('l');
  await keydown(page, 'o', false);
  await select(page, [0, 0, 0], 5, [0, 0, 0], 5);
  await page.keyboard.up('o');
  await keydown(page, ' ', false);
  await select(page, [0, 0, 0], 6, [0, 0, 0], 6);
  await page.keyboard.up(' ');
  await keydown(page, 'w', false);
  await select(page, [0, 0, 0], 7, [0, 0, 0], 7);
  await keydown(page, 'o', false);
  await select(page, [0, 0, 0], 8, [0, 0, 0], 8);
  await page.keyboard.up('w');
  await page.keyboard.up('o');
  await keydown(page, 'r', false);
  await select(page, [0, 0, 0], 9, [0, 0, 0], 9);
  await keydown(page, 'l', false);
  await select(page, [0, 0, 0], 10, [0, 0, 0], 10);
  await page.keyboard.up('r');
  await page.keyboard.up('l');
  await keydown(page, 'd', false);
  await select(page, [0, 0, 0], 11, [0, 0, 0], 11);
  await page.keyboard.up('d');
  await keydown(page, ' ', false);
  await select(page, [0, 0, 0], 12, [0, 0, 0], 12);
  await keydown(page, 'Shift', false);
  await page.keyboard.up(' ');
  await keydown(page, ':', false);
  await select(page, [0, 0, 0], 13, [0, 0, 0], 13);
  await page.keyboard.up(':');
  await keydown(page, ')', false);
  await select(page, [0, 2, 0], 1, [0, 2, 0], 1);
  await page.keyboard.up(')');
  await page.keyboard.up('Shift');
  await keydown(page, ' ', false);
  await page.keyboard.up(' ');
  await keydown(page, 'Alt', false);
  await page.keyboard.up('Alt');
  await keydown(page, '#', false);
  await select(page, [0, 2, 0], 2, [0, 2, 0], 2);
  await page.keyboard.up('#');
  await page.keyboard.up('Alt');
  await keydown(page, 'h', false);
  await select(page, [0, 3, 0], 2, [0, 3, 0], 2);
  await page.keyboard.up('h');
  await keydown(page, 'a', false);
  await select(page, [0, 3, 0], 3, [0, 3, 0], 3);
  await keydown(page, 's', false);
  await select(page, [0, 3, 0], 4, [0, 3, 0], 4);
  await page.keyboard.up('a');
  await page.keyboard.up('s');
  await keydown(page, 'h', false);
  await select(page, [0, 3, 0], 5, [0, 3, 0], 5);
  await page.keyboard.up('h');
  await keydown(page, 't', false);
  await select(page, [0, 3, 0], 6, [0, 3, 0], 6);
  await page.keyboard.up('t');
  await keydown(page, 'a', false);
  await select(page, [0, 3, 0], 7, [0, 3, 0], 7);
  await keydown(page, 'g', false);
  await select(page, [0, 3, 0], 8, [0, 3, 0], 8);
  await page.keyboard.up('a');
  await page.keyboard.up('g');
  await keydown(page, 'Meta', false);
  await keydown(page, 'a', true);
  await select(page, [0, 0, 0], 0, [0, 3, 0], 8);
  await keydown(page, 'x', false);
  await select(page, [0, 0, 0], 1, [0, 0, 0], 1);
  await page.keyboard.up('Meta');
  await page.keyboard.up('x');
  await keydown(page, 'Shift', false);
  await keydown(page, 'F', true);
  await page.keyboard.up('Shift');
  await page.keyboard.up('f');
  await keydown(page, 'o', false);
  await select(page, [0, 0, 0], 2, [0, 0, 0], 2);
  await page.keyboard.up('o');
  await keydown(page, 'o', false);
  await select(page, [0, 0, 0], 3, [0, 0, 0], 3);
  await page.keyboard.up('o');
  await keydown(page, ' ', false);
  await select(page, [0, 0, 0], 4, [0, 0, 0], 4);
  await page.keyboard.up(' ');
  await keydown(page, 'Shift', false);
  await keydown(page, ':', false);
  await select(page, [0, 0, 0], 5, [0, 0, 0], 5);
  await page.keyboard.up(':');
  await keydown(page, ')', false);
  await select(page, [0, 2, 0], 1, [0, 2, 0], 1);
  await page.keyboard.up(')');
  await page.keyboard.up('Shift');
  await keydown(page, ' ', false);
  await page.keyboard.up(' ');
  await keydown(page, 'e', false);
  await select(page, [0, 2, 0], 2, [0, 2, 0], 2);
  await keydown(page, 'e', false);
  await keydown(page, 'e', false);
  await keydown(page, 'e', false);
  await page.keyboard.up('e');
  await keydown(page, 'ArrowRight', true);
  await select(page, [0, 2, 0], 1, [0, 2, 0], 2);
  await composition(page, async (page, update, end) => {
    await select(page, [0, 2, 0], 1, [0, 2, 0], 1);
    await update('è');
    await select(page, [0, 2, 0], 1, [0, 2, 0], 2);
    await page.keyboard.up('ArrowRight');
    await keydown(page, 'Enter', false);
    await update('è');
    await select(page, [0, 2, 0], 2, [0, 2, 0], 2);
    await end('è');
  });
  await page.keyboard.up('Enter');
  await keydown(page, 'e', false);
  await select(page, [0, 2, 0], 3, [0, 2, 0], 3);
  await keydown(page, 'e', false);
  await keydown(page, 'e', false);
  await keydown(page, 'e', false);
  await page.keyboard.up('e');
  await keydown(page, 'ArrowRight', true);
  await select(page, [0, 2, 0], 2, [0, 2, 0], 3);
  await composition(page, async (page, update, end) => {
    await select(page, [0, 2, 0], 2, [0, 2, 0], 2);
    await update('è');
    await select(page, [0, 2, 0], 2, [0, 2, 0], 3);
    await page.keyboard.up('ArrowRight');
    await keydown(page, 'Enter', false);
    await update('è');
    await select(page, [0, 2, 0], 3, [0, 2, 0], 3);
    await end('è');
  });
  await page.keyboard.up('Enter');
  await keydown(page, 'Alt', true);
  await composition(page, async (page, update, end) => {
    await update('´');
    await select(page, [0, 2, 0], 4, [0, 2, 0], 4);
    await page.keyboard.up('Alt');
    await keydown(page, 'é', true);
    await select(page, [0, 2, 0], 3, [0, 2, 0], 4);
    await update('é');
    await select(page, [0, 2, 0], 4, [0, 2, 0], 4);
    await end('é');
  });
  await page.keyboard.up('e');
  await keydown(page, 'Alt', true);
  await composition(page, async (page, update, end) => {
    await update('´');
    await select(page, [0, 2, 0], 5, [0, 2, 0], 5);
    await page.keyboard.up('Alt');
    await keydown(page, 'é', true);
    await select(page, [0, 2, 0], 4, [0, 2, 0], 5);
    await update('é');
    await select(page, [0, 2, 0], 5, [0, 2, 0], 5);
    await end('é');
  });
  await page.keyboard.up('e');
  await keydown(page, ' ', false);
  await select(page, [0, 2, 0], 6, [0, 2, 0], 6);
  await page.keyboard.up(' ');
  await keydown(page, 'm', true);
  await composition(page, async (page, update, end) => {
    await update('m');
    await select(page, [0, 2, 0], 7, [0, 2, 0], 7);
    await keydown(page, 'o', false);
    await select(page, [0, 2, 0], 6, [0, 2, 0], 7);
    await update('も');
    await select(page, [0, 2, 0], 7, [0, 2, 0], 7);
    await page.keyboard.up('m');
    await page.keyboard.up('o');
    await keydown(page, 'j', false);
    await select(page, [0, 2, 0], 6, [0, 2, 0], 7);
    await update('もj');
    await select(page, [0, 2, 0], 8, [0, 2, 0], 8);
    await keydown(page, 'i', false);
    await select(page, [0, 2, 0], 6, [0, 2, 0], 8);
    await update('もじ');
    await select(page, [0, 2, 0], 8, [0, 2, 0], 8);
    await page.keyboard.up('j');
    await page.keyboard.up('i');
    await keydown(page, 'ArrowDown', false);
    await select(page, [0, 2, 0], 6, [0, 2, 0], 8);
    await update('モジュール');
    await select(page, [0, 2, 0], 6, [0, 2, 0], 11);
    await page.keyboard.up('ArrowDown');
    await keydown(page, 'Enter', false);
    await update('モジュール');
    await select(page, [0, 2, 0], 11, [0, 2, 0], 11);
    await end('モジュール');
  });
  await page.keyboard.up('Enter');
  await keydown(page, ' ', false);
  await select(page, [0, 2, 0], 12, [0, 2, 0], 12);
  await page.keyboard.up(' ');
  await keydown(page, 'm', true);
  await composition(page, async (page, update, end) => {
    await update('m');
    await select(page, [0, 2, 0], 13, [0, 2, 0], 13);
    await keydown(page, 'o', false);
    await select(page, [0, 2, 0], 12, [0, 2, 0], 13);
    await update('も');
    await select(page, [0, 2, 0], 13, [0, 2, 0], 13);
    await page.keyboard.up('m');
    await page.keyboard.up('o');
    await keydown(page, 'j', false);
    await select(page, [0, 2, 0], 12, [0, 2, 0], 13);
    await update('もj');
    await select(page, [0, 2, 0], 14, [0, 2, 0], 14);
    await keydown(page, 'i', false);
    await select(page, [0, 2, 0], 12, [0, 2, 0], 14);
    await update('もじ');
    await select(page, [0, 2, 0], 14, [0, 2, 0], 14);
    await page.keyboard.up('j');
    await page.keyboard.up('i');
    await keydown(page, 'ArrowDown', false);
    await select(page, [0, 2, 0], 12, [0, 2, 0], 14);
    await update('モジュール');
    await select(page, [0, 2, 0], 12, [0, 2, 0], 17);
    await page.keyboard.up('ArrowDown');
    await keydown(page, 'Enter', false);
    await update('モジュール');
    await select(page, [0, 2, 0], 17, [0, 2, 0], 17);
    await end('モジュール');
  });
  await page.keyboard.up('Enter');
  await page.$eval('div.editor', (e) => e.blur());
  await expectHTML(
    page,
    '<p class="editor-paragraph" dir="ltr"><span>Foo </span><span contenteditable="false" style="color: transparent; background-size: 16px 16px; height: 16px; width: 16px; background-position: center center; background-repeat: no-repeat; display: inline-block; margin: 0px 1px; text-align: center; vertical-align: middle; background-image: url(&quot;https://static.xx.fbcdn.net/images/emoji.php/v9/t4c/1/16/1f642.png&quot;);">🙂</span><span> èèéé モジュール　モジュール</span></p>',
  );
})();
