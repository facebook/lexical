{"version":3,"sources":["../../src/utils/ubuntuVersion.ts"],"names":["ubuntuVersionCached","getUbuntuVersion","undefined","getUbuntuVersionAsyncInternal","getUbuntuVersionSync","getUbuntuVersionSyncInternal","os","platform","osReleaseText","fs","promises","readFile","catch","e","parseUbuntuVersion","existsSync","readFileSync","fields","Map","line","split","tokens","name","shift","value","join","trim","startsWith","endsWith","substring","length","set","toLowerCase","get"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport * as os from 'os';\n\nlet ubuntuVersionCached: string | undefined;\n\nexport async function getUbuntuVersion(): Promise<string> {\n  if (ubuntuVersionCached === undefined)\n    ubuntuVersionCached = await getUbuntuVersionAsyncInternal();\n  return ubuntuVersionCached;\n}\n\nexport function getUbuntuVersionSync(): string {\n  if (ubuntuVersionCached === undefined)\n    ubuntuVersionCached = getUbuntuVersionSyncInternal();\n  return ubuntuVersionCached;\n}\n\nasync function getUbuntuVersionAsyncInternal(): Promise<string> {\n  if (os.platform() !== 'linux')\n    return '';\n  let osReleaseText = await fs.promises.readFile('/etc/upstream-release/lsb-release', 'utf8').catch(e => '');\n  if (!osReleaseText)\n    osReleaseText = await fs.promises.readFile('/etc/os-release', 'utf8').catch(e => '');\n  if (!osReleaseText)\n    return '';\n  return parseUbuntuVersion(osReleaseText);\n}\n\nfunction getUbuntuVersionSyncInternal(): string {\n  if (os.platform() !== 'linux')\n    return '';\n  try {\n    let osReleaseText: string;\n    if (fs.existsSync('/etc/upstream-release/lsb-release'))\n      osReleaseText = fs.readFileSync('/etc/upstream-release/lsb-release', 'utf8');\n    else\n      osReleaseText = fs.readFileSync('/etc/os-release', 'utf8');\n    if (!osReleaseText)\n      return '';\n    return parseUbuntuVersion(osReleaseText);\n  } catch (e) {\n    return '';\n  }\n}\n\nfunction parseUbuntuVersion(osReleaseText: string): string {\n  const fields = new Map();\n  for (const line of osReleaseText.split('\\n')) {\n    const tokens = line.split('=');\n    const name = tokens.shift();\n    let value = tokens.join('=').trim();\n    if (value.startsWith('\"') && value.endsWith('\"'))\n      value = value.substring(1, value.length - 1);\n    if (!name)\n      continue;\n    fields.set(name.toLowerCase(), value);\n  }\n  // For Linux mint\n  if (fields.get('distrib_id') && fields.get('distrib_id').toLowerCase() === 'ubuntu')\n    return fields.get('distrib_release') || '';\n\n  if (!fields.get('name') || fields.get('name').toLowerCase() !== 'ubuntu')\n    return '';\n  return fields.get('version_id') || '';\n}\n"],"file":"ubuntuVersion.js"}