{"version":3,"sources":["../../src/utils/browserFetcher.ts"],"names":["downloadBrowserWithProgressBar","title","browserDirectory","executablePath","downloadURL","downloadFileName","progressBarName","debugLogger","log","url","zipPath","path","join","os","tmpdir","bind","dir","fs","promises","chmod","e","process","exitCode","unlink","logPolitely","toBeLogged","logLevel","env","npm_config_loglevel","logLevelDisplay","indexOf","console"],"mappings":";;;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,eAAeA,8BAAf,CAA8CC,KAA9C,EAA6DC,gBAA7D,EAAuFC,cAAvF,EAA+GC,WAA/G,EAAoIC,gBAApI,EAAgL;AACrL,QAAMC,eAAe,GAAI,uBAAsBL,KAAM,EAArD;;AACA,MAAI,MAAM,wBAAYC,gBAAZ,CAAV,EAAyC;AACvC;AACAK,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,WAAUP,KAAM,yBAA5C;;AACA,WAAO,KAAP;AACD;;AAED,QAAMQ,GAAG,GAAGL,WAAZ;;AACA,QAAMM,OAAO,GAAGC,cAAKC,IAAL,CAAUC,YAAGC,MAAH,EAAV,EAAuBT,gBAAvB,CAAhB;;AACA,MAAI;AACF,UAAM,qBAASI,GAAT,EAAcC,OAAd,EAAuB;AAC3BJ,MAAAA,eAD2B;AAE3BE,MAAAA,GAAG,EAAED,yBAAYC,GAAZ,CAAgBO,IAAhB,CAAqBR,wBAArB,EAAkC,SAAlC;AAFsB,KAAvB,CAAN;;AAIAA,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,oBAA5B;;AACAD,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,WAAUE,OAAQ,EAA9C;;AACAH,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,gBAAeN,gBAAiB,EAA5D;;AACA,UAAM,yBAAQQ,OAAR,EAAiB;AAAEM,MAAAA,GAAG,EAAEd;AAAP,KAAjB,CAAN;;AACAK,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,yBAAwBL,cAAe,EAAnE;;AACA,UAAMc,YAAGC,QAAH,CAAYC,KAAZ,CAAkBhB,cAAlB,EAAkC,KAAlC,CAAN;AACD,GAXD,CAWE,OAAOiB,CAAP,EAAU;AACVb,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,uBAAsBF,eAAgB,gBAAec,CAAE,EAAnF;;AACAC,IAAAA,OAAO,CAACC,QAAR,GAAmB,CAAnB;AACA,UAAMF,CAAN;AACD,GAfD,SAeU;AACR,QAAI,MAAM,wBAAYV,OAAZ,CAAV,EACE,MAAMO,YAAGC,QAAH,CAAYK,MAAZ,CAAmBb,OAAnB,CAAN;AACH;;AACDc,EAAAA,WAAW,CAAE,GAAElB,eAAgB,kBAAiBJ,gBAAiB,EAAtD,CAAX;AACA,SAAO,IAAP;AACD;;AAGM,SAASsB,WAAT,CAAqBC,UAArB,EAAyC;AAC9C,QAAMC,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAYC,mBAA7B;AACA,QAAMC,eAAe,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4BC,OAA5B,CAAoCJ,QAAQ,IAAI,EAAhD,IAAsD,CAAC,CAA/E;AAEA,MAAI,CAACG,eAAL,EACEE,OAAO,CAACvB,GAAR,CAAYiB,UAAZ,EAL4C,CAKlB;AAC7B","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport extract from 'extract-zip';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport { existsAsync, download } from './utils';\nimport { debugLogger } from './debugLogger';\n\nexport async function downloadBrowserWithProgressBar(title: string, browserDirectory: string, executablePath: string, downloadURL: string, downloadFileName: string): Promise<boolean> {\n  const progressBarName = `Playwright build of ${title}`;\n  if (await existsAsync(browserDirectory)) {\n    // Already downloaded.\n    debugLogger.log('install', `browser ${title} is already downloaded.`);\n    return false;\n  }\n\n  const url = downloadURL;\n  const zipPath = path.join(os.tmpdir(), downloadFileName);\n  try {\n    await download(url, zipPath, {\n      progressBarName,\n      log: debugLogger.log.bind(debugLogger, 'install')\n    });\n    debugLogger.log('install', `extracting archive`);\n    debugLogger.log('install', `-- zip: ${zipPath}`);\n    debugLogger.log('install', `-- location: ${browserDirectory}`);\n    await extract(zipPath, { dir: browserDirectory });\n    debugLogger.log('install', `fixing permissions at ${executablePath}`);\n    await fs.promises.chmod(executablePath, 0o755);\n  } catch (e) {\n    debugLogger.log('install', `FAILED installation ${progressBarName} with error: ${e}`);\n    process.exitCode = 1;\n    throw e;\n  } finally {\n    if (await existsAsync(zipPath))\n      await fs.promises.unlink(zipPath);\n  }\n  logPolitely(`${progressBarName} downloaded to ${browserDirectory}`);\n  return true;\n}\n\n\nexport function logPolitely(toBeLogged: string) {\n  const logLevel = process.env.npm_config_loglevel;\n  const logLevelDisplay = ['silent', 'error', 'warn'].indexOf(logLevel || '') > -1;\n\n  if (!logLevelDisplay)\n    console.log(toBeLogged);  // eslint-disable-line no-console\n}\n"],"file":"browserFetcher.js"}