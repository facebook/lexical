/**
 * Flowtype definitions for LexicalTableNode
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.0
 * @flow
 */

import type { TableCellNode } from "./LexicalTableCellNode";
import type { Cell, Grid } from "./LexicalTableSelection";
import type {
  DOMConversionMap,
  DOMConversionOutput,
  DOMExportOutput,
  EditorConfig,
  LexicalEditor,
  LexicalNode,
  NodeKey,
  SerializedElementNode,
  Spread,
} from "lexical";
import { GridNode } from "lexical";
export type SerializedTableNode = Spread<
  {|
    type: "table",
    version: 1,
  |},
  SerializedElementNode
>;
declare export class TableNode mixins GridNode {
  __grid: Grid;
  static getType(): "table";
  static clone(node: TableNode): TableNode;
  static importDOM(): DOMConversionMap | null;
  static importJSON(_serializedNode: SerializedTableNode): TableNode;
  constructor(key?: NodeKey): this;
  exportJSON(): SerializedElementNode;
  createDOM(config: EditorConfig, editor?: LexicalEditor): HTMLElement;
  updateDOM(): boolean;
  exportDOM(editor: LexicalEditor): DOMExportOutput;
  canExtractContents(): false;
  canBeEmpty(): false;
  getCordsFromCellNode(
    tableCellNode: TableCellNode,
    grid: Grid
  ): {|
    x: number,
    y: number,
  |};
  getCellFromCords(x: number, y: number, grid: Grid): Cell | null;
  getCellFromCordsOrThrow(x: number, y: number, grid: Grid): Cell;
  getCellNodeFromCords(x: number, y: number, grid: Grid): TableCellNode | null;
  getCellNodeFromCordsOrThrow(x: number, y: number, grid: Grid): TableCellNode;
  canSelectBefore(): true;
  canIndent(): false;
}
declare export function $getElementGridForTableNode(
  editor: LexicalEditor,
  tableNode: TableNode
): Grid;
declare export function convertTableElement(
  _domNode: Node
): DOMConversionOutput;
declare export function $createTableNode(): TableNode;
declare export function $isTableNode(node: LexicalNode | null | void): boolean;
